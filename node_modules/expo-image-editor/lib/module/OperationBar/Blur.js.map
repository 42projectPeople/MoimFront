{"version":3,"sources":["Blur.tsx"],"names":["React","StyleSheet","View","Text","Platform","useRecoilState","IconButton","editingModeState","glContextState","imageBoundsState","imageDataState","processingState","Slider","Asset","GLView","ImageManinpulator","FileSystem","throttle","EditorContext","vertShader","fragShader","Blur","setProcessing","imageData","setImageData","setEditingMode","glContext","setGLContext","imageBounds","throttleBlur","useContext","sliderValue","setSliderValue","useState","blur","setBlur","glProgram","setGLProgram","onClose","onSaveWithBlur","gl","drawArrays","TRIANGLES","output","takeSnapshotAsync","OS","fileReaderInstance","FileReader","readAsDataURL","uri","onload","base64data","result","flippedOutput","manipulateAsync","flip","FlipType","Vertical","width","height","setTimeout","useEffect","setupGL","asset","localUri","copyAsync","from","to","cacheDirectory","fromURI","downloadAsync","vert","createShader","VERTEX_SHADER","frag","FRAGMENT_SHADER","shaderSource","compileShader","program","createProgram","attachShader","linkProgram","useProgram","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","verts","Float32Array","bufferData","STATIC_DRAW","positionAttrib","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","texture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","uniform1i","getUniformLocation","uniform1f","pixelFrequency","Math","max","round","catch","e","console","error","firstPassTexture","TEXTURE1","drawingBufferWidth","drawingBufferHeight","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","attachmentPoint","COLOR_ATTACHMENT0","framebufferTexture2D","endFrameEXP","throttleSliderBlur","useRef","value","leading","current","styles","container","row","justifyContent","slider","sliderTrack","prompt","create","flex","flexDirection","alignItems","color","fontSize","textAlign","paddingHorizontal","maxWidth","borderRadius"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,EAA6CC,QAA7C,QAA6D,cAA7D;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SACEC,gBADF,EAEEC,cAFF,EAIEC,gBAJF,EAKEC,cALF,EAMEC,eANF,QAOO,UAPP;AAQA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,SAAvB;AACA,OAAO,KAAKC,iBAAZ,MAAmC,wBAAnC;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,SAAsBC,QAAtB,QAAsC,QAAtC;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA,MAAMC,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,EAPA;AASA,MAAMC,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EApEA;AAsEA,OAAO,SAASC,IAAT,GAAgB;AACrB;AACA,QAAM,GAAGC,aAAH,IAAoBjB,cAAc,CAACM,eAAD,CAAxC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BnB,cAAc,CAACK,cAAD,CAAhD;AACA,QAAM,GAAGe,cAAH,IAAqBpB,cAAc,CAACE,gBAAD,CAAzC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BtB,cAAc,CAACG,cAAD,CAAhD;AACA,QAAM,CAACoB,WAAD,IAAgBvB,cAAc,CAACI,gBAAD,CAApC;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAmB7B,KAAK,CAAC8B,UAAN,CAAiBZ,aAAjB,CAAzB;AAEA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgChC,KAAK,CAACiC,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnC,KAAK,CAACiC,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BrC,KAAK,CAACiC,QAAN,CAAoC,IAApC,CAAlC;;AAEA,QAAMK,OAAO,GAAG,MAAM;AACpB;AACAX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,cAAc,CAAC,kBAAD,CAAd;AACD,GAJD;;AAMA,QAAMc,cAAc,GAAG,YAAY;AACjC;AACAjB,IAAAA,aAAa,CAAC,IAAD,CAAb,CAFiC,CAGjC;;AACA,UAAMkB,EAAE,GAAGd,SAAX;;AACA,QAAIc,EAAJ,EAAQ;AACNA,MAAAA,EAAE,CAACC,UAAH,CAAcD,EAAE,CAACE,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;AACA,YAAMC,MAAM,GAAG,MAAM7B,MAAM,CAAC8B,iBAAP,CAAyBJ,EAAzB,CAArB,CAFM,CAGN;AACA;;AACA,UAAIpC,QAAQ,CAACyC,EAAT,KAAgB,KAApB,EAA2B;AACzB,cAAMC,kBAAkB,GAAG,IAAIC,UAAJ,EAA3B;AACAD,QAAAA,kBAAkB,CAACE,aAAnB,CAAiCL,MAAM,CAACM,GAAxC;;AACAH,QAAAA,kBAAkB,CAACI,MAAnB,GAA4B,YAAY;AACtC,gBAAMC,UAAU,GAAGL,kBAAkB,CAACM,MAAtC;AACA,gBAAMC,aAAa,GAAG,MAAMtC,iBAAiB,CAACuC,eAAlB,CAC1BH,UAD0B,EAE1B,CAAC;AAAEI,YAAAA,IAAI,EAAExC,iBAAiB,CAACyC,QAAlB,CAA2BC;AAAnC,WAAD,CAF0B,CAA5B;AAIAjC,UAAAA,YAAY,CAAC;AACXyB,YAAAA,GAAG,EAAEI,aAAa,CAACJ,GADR;AAEXS,YAAAA,KAAK,EAAEL,aAAa,CAACK,KAFV;AAGXC,YAAAA,MAAM,EAAEN,aAAa,CAACM;AAHX,WAAD,CAAZ;AAKD,SAXD;AAYD,OAfD,MAeO;AACL,cAAMN,aAAa,GAAG,MAAMtC,iBAAiB,CAACuC,eAAlB,CAC1BX,MAAM,CAACM,GADmB,EAE1B,CAAC;AAAEM,UAAAA,IAAI,EAAExC,iBAAiB,CAACyC,QAAlB,CAA2BC;AAAnC,SAAD,CAF0B,CAA5B;AAIAjC,QAAAA,YAAY,CAAC;AACXyB,UAAAA,GAAG,EAAEI,aAAa,CAACJ,GADR;AAEXS,UAAAA,KAAK,EAAEL,aAAa,CAACK,KAFV;AAGXC,UAAAA,MAAM,EAAEN,aAAa,CAACM;AAHX,SAAD,CAAZ;AAKD,OA9BK,CAgCN;;;AACArC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAK,MAAAA,YAAY,CAAC,IAAD,CAAZ,CAlCM,CAmCN;AACA;;AACAiC,MAAAA,UAAU,CAAC,MAAM;AACfnC,QAAAA,cAAc,CAAC,kBAAD,CAAd;AACD,OAFS,EAEP,GAFO,CAAV;AAGD;AACF,GA9CD;;AAgDAzB,EAAAA,KAAK,CAAC6D,SAAN,CAAgB,MAAM;AACpB,QAAInC,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAMoC,OAAO,GAAG,YAAY;AAC1B;AACA,cAAMtB,EAAE,GAAGd,SAAX,CAF0B,CAG1B;AACA;;AACA,YAAIqC,KAAJ;;AACA,YAAI3D,QAAQ,CAACyC,EAAT,KAAgB,KAApB,EAA2B;AACzBkB,UAAAA,KAAK,GAAG;AACNd,YAAAA,GAAG,EAAE1B,SAAS,CAAC0B,GADT;AAENe,YAAAA,QAAQ,EAAEzC,SAAS,CAAC0B,GAFd;AAGNU,YAAAA,MAAM,EAAEpC,SAAS,CAACoC,MAHZ;AAIND,YAAAA,KAAK,EAAEnC,SAAS,CAACmC;AAJX,WAAR;AAMA,gBAAM1C,UAAU,CAACiD,SAAX,CAAqB;AACzBC,YAAAA,IAAI,EAAEH,KAAK,CAACd,GADa;AAEzBkB,YAAAA,EAAE,EAAEnD,UAAU,CAACoD,cAAX,GAA4B;AAFP,WAArB,CAAN;AAIAL,UAAAA,KAAK,CAACC,QAAN,GAAiBhD,UAAU,CAACoD,cAAX,GAA4B,UAA7C;AACD,SAZD,MAYO;AACLL,UAAAA,KAAK,GAAGlD,KAAK,CAACwD,OAAN,CAAc9C,SAAS,CAAC0B,GAAxB,CAAR;AACA,gBAAMc,KAAK,CAACO,aAAN,EAAN;AACD;;AACD,YAAIP,KAAK,CAACL,KAAN,IAAeK,KAAK,CAACJ,MAAzB,EAAiC;AAC/B;AACA,gBAAMY,IAAI,GAAG/B,EAAE,CAACgC,YAAH,CAAgBhC,EAAE,CAACiC,aAAnB,CAAb;AACA,gBAAMC,IAAI,GAAGlC,EAAE,CAACgC,YAAH,CAAgBhC,EAAE,CAACmC,eAAnB,CAAb;;AACA,cAAIJ,IAAI,IAAIG,IAAZ,EAAkB;AAChB;AACAlC,YAAAA,EAAE,CAACoC,YAAH,CAAgBL,IAAhB,EAAsBpD,UAAtB;AACAqB,YAAAA,EAAE,CAACqC,aAAH,CAAiBN,IAAjB;AACA/B,YAAAA,EAAE,CAACoC,YAAH,CAAgBF,IAAhB,EAAsBtD,UAAtB;AACAoB,YAAAA,EAAE,CAACqC,aAAH,CAAiBH,IAAjB,EALgB,CAMhB;;AACA,kBAAMI,OAAO,GAAGtC,EAAE,CAACuC,aAAH,EAAhB;;AACA,gBAAID,OAAJ,EAAa;AACX;AACAtC,cAAAA,EAAE,CAACwC,YAAH,CAAgBF,OAAhB,EAAyBP,IAAzB;AACA/B,cAAAA,EAAE,CAACwC,YAAH,CAAgBF,OAAhB,EAAyBJ,IAAzB,EAHW,CAIX;AACA;;AACAlC,cAAAA,EAAE,CAACyC,WAAH,CAAeH,OAAf,EANW,CAOX;;AACAtC,cAAAA,EAAE,CAAC0C,UAAH,CAAcJ,OAAd,EARW,CASX;;AACA,oBAAMK,MAAM,GAAG3C,EAAE,CAAC4C,YAAH,EAAf;AACA5C,cAAAA,EAAE,CAAC6C,UAAH,CAAc7C,EAAE,CAAC8C,YAAjB,EAA+BH,MAA/B,EAXW,CAYX;AACA;;AACA,oBAAMI,KAAK,GAAG,IAAIC,YAAJ,CAAiB,CAC7B,CAAC,CAD4B,EACzB,CAAC,CADwB,EACrB,CADqB,EAClB,CAAC,CADiB,EACd,CADc,EACX,CADW,EACR,CAAC,CADO,EACJ,CAAC,CADG,EACA,CAAC,CADD,EACI,CADJ,EACO,CADP,EACU,CADV,CAAjB,CAAd,CAdW,CAiBX;AACA;;AACAhD,cAAAA,EAAE,CAACiD,UAAH,CAAcjD,EAAE,CAAC8C,YAAjB,EAA+BC,KAA/B,EAAsC/C,EAAE,CAACkD,WAAzC,EAnBW,CAoBX;AACA;;AACA,oBAAMC,cAAc,GAAGnD,EAAE,CAACoD,iBAAH,CAAqBd,OAArB,EAA8B,UAA9B,CAAvB;AACAtC,cAAAA,EAAE,CAACqD,uBAAH,CAA2BF,cAA3B,EAvBW,CAuBiC;AAC5C;;AACAnD,cAAAA,EAAE,CAACsD,mBAAH,CAAuBH,cAAvB,EAAuC,CAAvC,EAA0CnD,EAAE,CAACuD,KAA7C,EAAoD,KAApD,EAA2D,CAA3D,EAA8D,CAA9D,EAzBW,CA0BX;AACA;AAEA;;AACA,oBAAMC,OAAO,GAAGxD,EAAE,CAACyD,aAAH,EAAhB,CA9BW,CA+BX;;AACAzD,cAAAA,EAAE,CAAC0D,aAAH,CAAiB1D,EAAE,CAAC2D,QAApB,EAhCW,CAiCX;;AACA3D,cAAAA,EAAE,CAAC4D,WAAH,CAAe5D,EAAE,CAAC6D,UAAlB,EAA8BL,OAA9B,EAlCW,CAmCX;;AACAxD,cAAAA,EAAE,CAAC8D,aAAH,CAAiB9D,EAAE,CAAC6D,UAApB,EAAgC7D,EAAE,CAAC+D,kBAAnC,EAAuD/D,EAAE,CAACgE,MAA1D;AACAhE,cAAAA,EAAE,CAAC8D,aAAH,CAAiB9D,EAAE,CAAC6D,UAApB,EAAgC7D,EAAE,CAACiE,kBAAnC,EAAuDjE,EAAE,CAACgE,MAA1D,EArCW,CAsCX;;AACAhE,cAAAA,EAAE,CAACkE,UAAH,CACElE,EAAE,CAAC6D,UADL,EAEE,CAFF,EAGE7D,EAAE,CAACmE,IAHL,EAIEnE,EAAE,CAACmE,IAJL,EAKEnE,EAAE,CAACoE,aALL,EAME7C,KANF,EAvCW,CA+CX;;AACAvB,cAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,SAA/B,CAAb,EAAwD,CAAxD;AACAtC,cAAAA,EAAE,CAACuE,SAAH,CACEvE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,OAA/B,CADF,EAEEf,KAAK,CAACL,KAFR;AAIAlB,cAAAA,EAAE,CAACuE,SAAH,CACEvE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,QAA/B,CADF,EAEEf,KAAK,CAACJ,MAFR,EArDW,CAyDX;AACA;;AACA,oBAAMqD,cAAc,GAAGC,IAAI,CAACC,GAAL,CACrBD,IAAI,CAACE,KAAL,CAAW5F,SAAS,CAACmC,KAAV,GAAkB9B,WAAW,CAAC8B,KAA9B,GAAsC,CAAjD,CADqB,EAErB,CAFqB,CAAvB;AAIAlB,cAAAA,EAAE,CAACuE,SAAH,CACEvE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,gBAA/B,CADF,EAEEkC,cAFF;AAIA3E,cAAAA,YAAY,CAACyC,OAAD,CAAZ;AACD;AACF;AACF;AACF,OAzGD;;AA0GAhB,MAAAA,OAAO,GAAGsD,KAAV,CAAiBC,CAAD,IAAOC,OAAO,CAACC,KAAR,CAAcF,CAAd,CAAvB;AACD;AACF,GA9GD,EA8GG,CAAC3F,SAAD,EAAYH,SAAZ,CA9GH;AAgHAvB,EAAAA,KAAK,CAAC6D,SAAN,CAAgB,MAAM;AACpB,UAAMrB,EAAE,GAAGd,SAAX;AACA,UAAMoD,OAAO,GAAG1C,SAAhB;;AACA,QAAII,EAAE,KAAK,IAAP,IAAesC,OAAO,KAAK,IAA/B,EAAqC;AACnCtC,MAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,SAA/B,CAAb,EAAwD,CAAxD;AACAtC,MAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,QAA/B,CAAb,EAAuD5C,IAAvD;AACAM,MAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,MAA/B,CAAb,EAAqD,CAArD,EAHmC,CAInC;AACA;;AACA,YAAM0C,gBAAgB,GAAGhF,EAAE,CAACyD,aAAH,EAAzB,CANmC,CAOnC;;AACAzD,MAAAA,EAAE,CAAC0D,aAAH,CAAiB1D,EAAE,CAACiF,QAApB,EARmC,CASnC;;AACAjF,MAAAA,EAAE,CAAC4D,WAAH,CAAe5D,EAAE,CAAC6D,UAAlB,EAA8BmB,gBAA9B,EAVmC,CAWnC;;AACAhF,MAAAA,EAAE,CAAC8D,aAAH,CAAiB9D,EAAE,CAAC6D,UAApB,EAAgC7D,EAAE,CAAC+D,kBAAnC,EAAuD/D,EAAE,CAACgE,MAA1D;AACAhE,MAAAA,EAAE,CAAC8D,aAAH,CAAiB9D,EAAE,CAAC6D,UAApB,EAAgC7D,EAAE,CAACiE,kBAAnC,EAAuDjE,EAAE,CAACgE,MAA1D,EAbmC,CAcnC;;AACAhE,MAAAA,EAAE,CAACkE,UAAH,CACElE,EAAE,CAAC6D,UADL,EAEE,CAFF,EAGE7D,EAAE,CAACmE,IAHL,EAIEnE,EAAE,CAACkF,kBAJL,EAKElF,EAAE,CAACmF,mBALL,EAME,CANF,EAOEnF,EAAE,CAACmE,IAPL,EAQEnE,EAAE,CAACoE,aARL,EASE,IATF;AAWA,YAAMgB,EAAE,GAAGpF,EAAE,CAACqF,iBAAH,EAAX;AACArF,MAAAA,EAAE,CAACsF,eAAH,CAAmBtF,EAAE,CAACuF,WAAtB,EAAmCH,EAAnC,EA3BmC,CA4BnC;;AACA,YAAMI,eAAe,GAAGxF,EAAE,CAACyF,iBAA3B;AACAzF,MAAAA,EAAE,CAAC0F,oBAAH,CACE1F,EAAE,CAACuF,WADL,EAEEC,eAFF,EAGExF,EAAE,CAAC6D,UAHL,EAIEmB,gBAJF,EAKE,CALF,EA9BmC,CAqCnC;AACA;;AACAhF,MAAAA,EAAE,CAACC,UAAH,CAAcD,EAAE,CAACE,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;AACAF,MAAAA,EAAE,CAACsF,eAAH,CAAmBtF,EAAE,CAACuF,WAAtB,EAAmC,IAAnC,EAxCmC,CAyCnC;;AACAvF,MAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,SAA/B,CAAb,EAAwD,CAAxD;AACAtC,MAAAA,EAAE,CAACqE,SAAH,CAAarE,EAAE,CAACsE,kBAAH,CAAsBhC,OAAtB,EAA+B,MAA/B,CAAb,EAAqD,CAArD;AACAtC,MAAAA,EAAE,CAACC,UAAH,CAAcD,EAAE,CAACE,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;AACAF,MAAAA,EAAE,CAAC2F,WAAH;AACD;AACF,GAlDD,EAkDG,CAACjG,IAAD,EAAOR,SAAP,EAAkBU,SAAlB,CAlDH;AAoDA,QAAMgG,kBAAkB,GAAGpI,KAAK,CAACqI,MAAN,CACzBpH,QAAQ,CAAEqH,KAAD,IAAWnG,OAAO,CAACmG,KAAD,CAAnB,EAA4B,EAA5B,EAAgC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAhC,CADiB,EAEzBC,OAFF;AAIAxI,EAAAA,KAAK,CAAC6D,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAM,CAAE,CAAf;AACD,GAFD;;AAIA,MAAInC,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE+G,MAAM,CAACC;AAApB,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACD,MAAM,CAACE,GAAR,EAAa;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAb;AAAb,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE7G,WADT;AAEE,IAAA,aAAa,EAAGuG,KAAD,IAAW;AACxBtG,MAAAA,cAAc,CAACsG,KAAK,CAAC,CAAD,CAAN,CAAd;;AACA,UAAIzG,YAAJ,EAAkB;AAChBuG,QAAAA,kBAAkB,CAACnB,IAAI,CAACE,KAAL,CAAWmB,KAAK,CAAC,CAAD,CAAhB,CAAD,CAAlB;AACD,OAFD,MAEO;AACLnG,QAAAA,OAAO,CAAC8E,IAAI,CAACE,KAAL,CAAWmB,KAAK,CAAC,CAAD,CAAhB,CAAD,CAAP;AACD;AACF,KATH;AAUE,IAAA,YAAY,EAAE,CAVhB;AAWE,IAAA,YAAY,EAAE,EAXhB;AAYE,IAAA,qBAAqB,EAAC,SAZxB;AAaE,IAAA,qBAAqB,EAAC,MAbxB;AAcE,IAAA,cAAc,EAAC,SAdjB;AAeE,IAAA,cAAc,EAAEG,MAAM,CAACI,MAfzB;AAgBE,IAAA,UAAU,EAAEJ,MAAM,CAACK;AAhBrB,IADF,CADF,eAqBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACE;AAApB,kBACE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAC,OAAnB;AAA2B,IAAA,IAAI,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAE,MAAMrG,OAAO;AAA/D,IADF,eAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEmG,MAAM,CAACM;AAApB,sBACgB9B,IAAI,CAACE,KAAL,CAAWpF,WAAX,CADhB,CAFF,eAKE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAC,OADT;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,OAAO,EAAE,MAAMQ,cAAc;AAH/B,IALF,CArBF,CADF;AAmCD;AAED,MAAMkG,MAAM,GAAGxI,UAAU,CAAC+I,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,aAAa,EAAE,QAFN;AAGTN,IAAAA,cAAc,EAAE,eAHP;AAITO,IAAAA,UAAU,EAAE;AAJH,GADoB;AAO/BJ,EAAAA,MAAM,EAAE;AACNK,IAAAA,KAAK,EAAE,MADD;AAENC,IAAAA,QAAQ,EAAE,EAFJ;AAGNC,IAAAA,SAAS,EAAE;AAHL,GAPuB;AAY/BX,EAAAA,GAAG,EAAE;AACHjF,IAAAA,KAAK,EAAE,MADJ;AAEHC,IAAAA,MAAM,EAAE,EAFL;AAGHuF,IAAAA,aAAa,EAAE,KAHZ;AAIHN,IAAAA,cAAc,EAAE,eAJb;AAKHO,IAAAA,UAAU,EAAE,QALT;AAMHI,IAAAA,iBAAiB,EAAE;AANhB,GAZ0B;AAoB/BV,EAAAA,MAAM,EAAE;AACNlF,IAAAA,MAAM,EAAE,EADF;AAEND,IAAAA,KAAK,EAAE,KAFD;AAGN8F,IAAAA,QAAQ,EAAE;AAHJ,GApBuB;AAyB/BV,EAAAA,WAAW,EAAE;AACXW,IAAAA,YAAY,EAAE;AADH;AAzBkB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, View, Text, PixelRatio, Platform } from \"react-native\";\nimport { useRecoilState } from \"recoil\";\nimport { IconButton } from \"../components/IconButton\";\nimport {\n  editingModeState,\n  glContextState,\n  glProgramState,\n  imageBoundsState,\n  imageDataState,\n  processingState,\n} from \"../Store\";\nimport { Slider } from \"@miblanchard/react-native-slider\";\nimport { Asset } from \"expo-asset\";\nimport { GLView } from \"expo-gl\";\nimport * as ImageManinpulator from \"expo-image-manipulator\";\nimport * as FileSystem from \"expo-file-system\";\nimport _, { debounce, throttle } from \"lodash\";\nimport { EditorContext } from \"../index\";\n\nconst vertShader = `\nprecision highp float;\nattribute vec2 position;\nvarying vec2 uv;\nvoid main () {\n  uv = position;\n  gl_Position = vec4(1.0 - 2.0 * uv, 0, 1);\n}`;\n\nconst fragShader = `\nprecision highp float;\nprecision highp int;\nuniform sampler2D texture;\nuniform highp float width;\nuniform highp float height;\nvarying vec2 uv;\nuniform highp int radius;\nuniform highp int pass;\nuniform highp float pixelFrequency;\nfloat gauss (float sigma, float x) {\n  float g = (1.0/sqrt(2.0*3.142*sigma*sigma))*exp(-0.5*(x*x)/(sigma*sigma));\n  return g;\n}\nvoid main () {\n  float f_radius = float(radius);\n  float sigma = (0.5 * f_radius);\n  // Get the color of the fragment pixel\n  vec4 color = texture2D(texture, vec2(uv.x, uv.y));\n  color *= gauss(sigma, 0.0);\n  // Loop over the neightbouring pixels\n  for (int i = -30; i <= 30; i++) {\n    // Make sure we don't include the main pixel which we already sampled!\n    if (i != 0) {\n      // Check we are on an index that doesn't exceed the blur radius specified\n      if (i >= -radius && i <= radius) {\n        float index = float(i);\n        // Caclulate the current pixel index\n        float pixelIndex = 0.0;\n        if (pass == 0) {\n          pixelIndex = (uv.y) * height;\n        }\n        else {\n          pixelIndex = uv.x * width;\n        }\n        // Get the neighbouring pixel index\n        float offset = index * pixelFrequency;\n        pixelIndex += offset;\n        // Normalise the new index back into the 0.0 to 1.0 range\n        if (pass == 0) {\n          pixelIndex /= height;\n        }\n        else {\n          pixelIndex /= width;\n        }\n        // Pad the UV \n        if (pixelIndex < 0.0) {\n          pixelIndex = 0.0;\n        }\n        if (pixelIndex > 1.0) {\n          pixelIndex = 1.0;\n        }\n        // Get gaussian amplitude\n        float g = gauss(sigma, index);\n        // Get the color of neighbouring pixel\n        vec4 previousColor = vec4(0.0, 0.0, 0.0, 0.0);\n        if (pass == 0) {\n          previousColor = texture2D(texture, vec2(uv.x, pixelIndex)) * g;\n        }\n        else {\n          previousColor = texture2D(texture, vec2(pixelIndex, uv.y)) * g;\n        }\n        color += previousColor;\n      }\n    }\n  }\n  // Return the resulting color\n  gl_FragColor = color;\n}`;\n\nexport function Blur() {\n  //\n  const [, setProcessing] = useRecoilState(processingState);\n  const [imageData, setImageData] = useRecoilState(imageDataState);\n  const [, setEditingMode] = useRecoilState(editingModeState);\n  const [glContext, setGLContext] = useRecoilState(glContextState);\n  const [imageBounds] = useRecoilState(imageBoundsState);\n  const { throttleBlur } = React.useContext(EditorContext);\n\n  const [sliderValue, setSliderValue] = React.useState(15);\n  const [blur, setBlur] = React.useState(15);\n  const [glProgram, setGLProgram] = React.useState<WebGLProgram | null>(null);\n\n  const onClose = () => {\n    // If closing reset the image back to its original\n    setGLContext(null);\n    setEditingMode(\"operation-select\");\n  };\n\n  const onSaveWithBlur = async () => {\n    // Set the processing to true so no UI can be interacted with\n    setProcessing(true);\n    // Take a snapshot of the GLView's current framebuffer and set that as the new image data\n    const gl = glContext;\n    if (gl) {\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      const output = await GLView.takeSnapshotAsync(gl);\n      // Do any addtional platform processing of the result and set it as the\n      // new image data\n      if (Platform.OS === \"web\") {\n        const fileReaderInstance = new FileReader();\n        fileReaderInstance.readAsDataURL(output.uri as any);\n        fileReaderInstance.onload = async () => {\n          const base64data = fileReaderInstance.result;\n          const flippedOutput = await ImageManinpulator.manipulateAsync(\n            base64data as string,\n            [{ flip: ImageManinpulator.FlipType.Vertical }]\n          );\n          setImageData({\n            uri: flippedOutput.uri,\n            width: flippedOutput.width,\n            height: flippedOutput.height,\n          });\n        };\n      } else {\n        const flippedOutput = await ImageManinpulator.manipulateAsync(\n          output.uri as string,\n          [{ flip: ImageManinpulator.FlipType.Vertical }]\n        );\n        setImageData({\n          uri: flippedOutput.uri as string,\n          width: flippedOutput.width,\n          height: flippedOutput.height,\n        });\n      }\n\n      // Reset back to operation selection mode\n      setProcessing(false);\n      setGLContext(null);\n      // Small timeout so it can set processing state to flase BEFORE\n      // Blur component is unmounted...\n      setTimeout(() => {\n        setEditingMode(\"operation-select\");\n      }, 100);\n    }\n  };\n\n  React.useEffect(() => {\n    if (glContext !== null) {\n      const setupGL = async () => {\n        // Load in the asset and get its height and width\n        const gl = glContext;\n        // Do some magic instead of using asset.download async as this tries to\n        // redownload the file:// uri on android and iOS\n        let asset;\n        if (Platform.OS !== \"web\") {\n          asset = {\n            uri: imageData.uri,\n            localUri: imageData.uri,\n            height: imageData.height,\n            width: imageData.width,\n          };\n          await FileSystem.copyAsync({\n            from: asset.uri,\n            to: FileSystem.cacheDirectory + \"blur.jpg\",\n          });\n          asset.localUri = FileSystem.cacheDirectory + \"blur.jpg\";\n        } else {\n          asset = Asset.fromURI(imageData.uri);\n          await asset.downloadAsync();\n        }\n        if (asset.width && asset.height) {\n          // Setup the shaders for our GL context so it draws from texImage2D\n          const vert = gl.createShader(gl.VERTEX_SHADER);\n          const frag = gl.createShader(gl.FRAGMENT_SHADER);\n          if (vert && frag) {\n            // Set the source of the shaders and compile them\n            gl.shaderSource(vert, vertShader);\n            gl.compileShader(vert);\n            gl.shaderSource(frag, fragShader);\n            gl.compileShader(frag);\n            // Create a WebGL program so we can link the shaders together\n            const program = gl.createProgram();\n            if (program) {\n              // Attach both the vertex and frag shader to the program\n              gl.attachShader(program, vert);\n              gl.attachShader(program, frag);\n              // Link the program - ensures that vetex and frag shaders are compatible\n              // with each other\n              gl.linkProgram(program);\n              // Tell GL we ant to now use this program\n              gl.useProgram(program);\n              // Create a buffer on the GPU and assign its type as array buffer\n              const buffer = gl.createBuffer();\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n              // Create the verticies for WebGL to form triangles on the screen\n              // using the vertex shader which forms a square or rectangle in this case\n              const verts = new Float32Array([\n                -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1,\n              ]);\n              // Actually pass the verticies into the buffer and tell WebGL this is static\n              // for optimisations\n              gl.bufferData(gl.ARRAY_BUFFER, verts, gl.STATIC_DRAW);\n              // Get the index in memory for the position attribute defined in the\n              // vertex shader\n              const positionAttrib = gl.getAttribLocation(program, \"position\");\n              gl.enableVertexAttribArray(positionAttrib); // Enable it i guess\n              // Tell the vertex shader how to process this attribute buffer\n              gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n              // Fetch an expo asset which can passed in as the source for the\n              // texImage2D\n\n              // Create some space in memory for a texture\n              const texture = gl.createTexture();\n              // Set the active texture to the texture 0 binding (0-30)\n              gl.activeTexture(gl.TEXTURE0);\n              // Bind the texture to WebGL stating what type of texture it is\n              gl.bindTexture(gl.TEXTURE_2D, texture);\n              // Set some parameters for the texture\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n              // Then set the data of this texture using texImage2D\n              gl.texImage2D(\n                gl.TEXTURE_2D,\n                0,\n                gl.RGBA,\n                gl.RGBA,\n                gl.UNSIGNED_BYTE,\n                asset as any\n              );\n              // Set a bunch of uniforms we want to pass into our fragment shader\n              gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n              gl.uniform1f(\n                gl.getUniformLocation(program, \"width\"),\n                asset.width\n              );\n              gl.uniform1f(\n                gl.getUniformLocation(program, \"height\"),\n                asset.height\n              );\n              // Calculate the pixel frequency to sample at based on the image resolution\n              // as the blur radius is in dp\n              const pixelFrequency = Math.max(\n                Math.round(imageData.width / imageBounds.width / 2),\n                1\n              );\n              gl.uniform1f(\n                gl.getUniformLocation(program, \"pixelFrequency\"),\n                pixelFrequency\n              );\n              setGLProgram(program);\n            }\n          }\n        }\n      };\n      setupGL().catch((e) => console.error(e));\n    }\n  }, [glContext, imageData]);\n\n  React.useEffect(() => {\n    const gl = glContext;\n    const program = glProgram;\n    if (gl !== null && program !== null) {\n      gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n      gl.uniform1i(gl.getUniformLocation(program, \"radius\"), blur);\n      gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 0);\n      // Setup so first pass renders to a texture rather than to canvas\n      // Create and bind the framebuffer\n      const firstPassTexture = gl.createTexture();\n      // Set the active texture to the texture 0 binding (0-30)\n      gl.activeTexture(gl.TEXTURE1);\n      // Bind the texture to WebGL stating what type of texture it is\n      gl.bindTexture(gl.TEXTURE_2D, firstPassTexture);\n      // Set some parameters for the texture\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      // Then set the data of this texture using texImage2D\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.drawingBufferWidth,\n        gl.drawingBufferHeight,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        null\n      );\n      const fb = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n      // attach the texture as the first color attachment\n      const attachmentPoint = gl.COLOR_ATTACHMENT0;\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        attachmentPoint,\n        gl.TEXTURE_2D,\n        firstPassTexture,\n        0\n      );\n      //gl.viewport(0, 0, imageData.width, imageData.height);\n      // Actually draw using the shader program we setup!\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      //gl.viewport(0, 0, imageData.width, imageData.height);\n      gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 1);\n      gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 1);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.endFrameEXP();\n    }\n  }, [blur, glContext, glProgram]);\n\n  const throttleSliderBlur = React.useRef<(value: number) => void>(\n    throttle((value) => setBlur(value), 50, { leading: true })\n  ).current;\n\n  React.useEffect(() => {\n    return () => {};\n  });\n\n  if (glContext === null) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.row, { justifyContent: \"center\" }]}>\n        <Slider\n          value={sliderValue}\n          onValueChange={(value) => {\n            setSliderValue(value[0]);\n            if (throttleBlur) {\n              throttleSliderBlur(Math.round(value[0]));\n            } else {\n              setBlur(Math.round(value[0]));\n            }\n          }}\n          minimumValue={1}\n          maximumValue={30}\n          minimumTrackTintColor=\"#00A3FF\"\n          maximumTrackTintColor=\"#ccc\"\n          thumbTintColor=\"#c4c4c4\"\n          containerStyle={styles.slider}\n          trackStyle={styles.sliderTrack}\n        />\n      </View>\n      <View style={styles.row}>\n        <IconButton iconID=\"close\" text=\"Cancel\" onPress={() => onClose()} />\n        <Text style={styles.prompt}>\n          Blur Radius: {Math.round(sliderValue)}\n        </Text>\n        <IconButton\n          iconID=\"check\"\n          text=\"Done\"\n          onPress={() => onSaveWithBlur()}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  prompt: {\n    color: \"#fff\",\n    fontSize: 21,\n    textAlign: \"center\",\n  },\n  row: {\n    width: \"100%\",\n    height: 80,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: \"2%\",\n  },\n  slider: {\n    height: 20,\n    width: \"90%\",\n    maxWidth: 600,\n  },\n  sliderTrack: {\n    borderRadius: 10,\n  },\n});\n"]}