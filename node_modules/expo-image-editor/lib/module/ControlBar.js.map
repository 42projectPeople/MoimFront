{"version":3,"sources":["ControlBar.tsx"],"names":["React","View","StyleSheet","useRecoilState","editingModeState","imageDataState","processingState","IconButton","useContext","EditorContext","useEffect","usePerformCrop","ControlBar","editingMode","setEditingMode","imageData","processing","setProcessing","mode","onCloseEditor","onEditingComplete","performCrop","shouldDisableDoneButton","onFinishEditing","onPressBack","uri","styles","container","create","width","height","backgroundColor","flexDirection","justifyContent","alignItems","paddingHorizontal"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AAEA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,eAA3C,QAAkE,SAAlE;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;;AAEA,SAASC,UAAT,GAAsB;AACpB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,cAAc,CAACC,gBAAD,CAApD;AACA,QAAM,CAACW,SAAD,IAAcZ,cAAc,CAACE,cAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8Bd,cAAc,CAACG,eAAD,CAAlD;AACA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA;AAAvB,MAA6CZ,UAAU,CAACC,aAAD,CAA7D;AAEA,QAAMY,WAAW,GAAGV,cAAc,EAAlC;AAEA,QAAMW,uBAAuB,GAC3BT,WAAW,KAAK,kBAAhB,IAAsCK,IAAI,KAAK,WADjD;;AAGA,QAAMK,eAAe,GAAG,YAAY;AAClC,QAAIL,IAAI,KAAK,MAAb,EAAqB;AACnBD,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAG,MAAAA,iBAAiB,CAACL,SAAD,CAAjB;AACAI,MAAAA,aAAa;AACd,KAJD,MAIO,IAAID,IAAI,KAAK,WAAb,EAA0B;AAC/B,YAAMG,WAAW,EAAjB;AACD;AACF,GARD;;AAUA,QAAMG,WAAW,GAAG,MAAM;AACxB,QAAIN,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIL,WAAW,KAAK,kBAApB,EAAwC;AACtCM,QAAAA,aAAa;AACd,OAFD,MAEO;AACLL,QAAAA,cAAc,CAAC,kBAAD,CAAd;AACD;AACF,KAND,MAMO,IAAII,IAAI,KAAK,WAAb,EAA0B;AAC/BC,MAAAA,aAAa;AACd;AACF,GAVD,CAtBoB,CAkCpB;AACA;AACA;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QACEQ,IAAI,KAAK,WAAT,IACAH,SAAS,CAACU,GADV,IAEAZ,WAAW,KAAK,kBAHlB,EAIE;AACAO,MAAAA,iBAAiB,CAACL,SAAD,CAAjB;AACAI,MAAAA,aAAa;AACd;AACF,GATQ,EASN,CAACJ,SAAD,EAAYF,WAAZ,CATM,CAAT;AAWA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC;AAApB,kBACE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAC,YAAnB;AAAgC,IAAA,IAAI,EAAC,MAArC;AAA4C,IAAA,OAAO,EAAEH;AAArD,IADF,eAEE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAC,MADT;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,OAAO,EAAED,eAHX;AAIE,IAAA,QAAQ,EAAED;AAJZ,IAFF,CADF;AAWD;;AAED,SAASV,UAAT;AAEA,MAAMc,MAAM,GAAGxB,UAAU,CAAC0B,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,KAAK,EAAE,MADE;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,eAAe,EAAE,MAHR;AAITC,IAAAA,aAAa,EAAE,KAJN;AAKTC,IAAAA,cAAc,EAAE,eALP;AAMTC,IAAAA,UAAU,EAAE,QANH;AAOTC,IAAAA,iBAAiB,EAAE;AAPV;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport _ from \"lodash\";\nimport { useRecoilState } from \"recoil\";\nimport { editingModeState, imageDataState, processingState } from \"./Store\";\nimport { IconButton } from \"./components/IconButton\";\nimport { useContext } from \"react\";\nimport { EditorContext } from \"./index\";\nimport { useEffect } from \"react\";\nimport { usePerformCrop } from \"./customHooks/usePerformCrop\";\n\nfunction ControlBar() {\n  //\n  const [editingMode, setEditingMode] = useRecoilState(editingModeState);\n  const [imageData] = useRecoilState(imageDataState);\n  const [processing, setProcessing] = useRecoilState(processingState);\n  const { mode, onCloseEditor, onEditingComplete } = useContext(EditorContext);\n\n  const performCrop = usePerformCrop();\n\n  const shouldDisableDoneButton =\n    editingMode !== \"operation-select\" && mode !== \"crop-only\";\n\n  const onFinishEditing = async () => {\n    if (mode === \"full\") {\n      setProcessing(false);\n      onEditingComplete(imageData);\n      onCloseEditor();\n    } else if (mode === \"crop-only\") {\n      await performCrop();\n    }\n  };\n\n  const onPressBack = () => {\n    if (mode === \"full\") {\n      if (editingMode === \"operation-select\") {\n        onCloseEditor();\n      } else {\n        setEditingMode(\"operation-select\");\n      }\n    } else if (mode === \"crop-only\") {\n      onCloseEditor();\n    }\n  };\n\n  // Complete the editing process if we are in crop only mode after the editingMode gets set\n  // back to operation select (happens internally in usePerformCrop) - can't do it in onFinishEditing\n  // else it gets stale state - may need to refactor the hook as this feels hacky\n  useEffect(() => {\n    if (\n      mode === \"crop-only\" &&\n      imageData.uri &&\n      editingMode === \"operation-select\"\n    ) {\n      onEditingComplete(imageData);\n      onCloseEditor();\n    }\n  }, [imageData, editingMode]);\n\n  return (\n    <View style={styles.container}>\n      <IconButton iconID=\"arrow-back\" text=\"Back\" onPress={onPressBack} />\n      <IconButton\n        iconID=\"done\"\n        text=\"Done\"\n        onPress={onFinishEditing}\n        disabled={shouldDisableDoneButton}\n      />\n    </View>\n  );\n}\n\nexport { ControlBar };\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    height: 80,\n    backgroundColor: \"#333\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: 4,\n  },\n});\n"]}