{"version":3,"sources":["index.tsx"],"names":["React","StyleSheet","View","StatusBar","Platform","ControlBar","EditingWindow","ImageManipulator","Processing","useRecoilState","RecoilRoot","processingState","imageDataState","editingModeState","readyState","OperationBar","UniversalModal","noScroll","require","EditorContext","createContext","throttleBlur","minimumCropDimensions","width","height","fixedAspectRatio","lockAspectRatio","mode","onCloseEditor","onEditingComplete","ImageEditorCore","props","fixedCropAspectRatio","allowedTransformOperations","allowedAdjustmentOperations","setImageData","setReady","setEditingMode","useEffect","initialise","imageUri","enableEditor","on","OS","img","document","createElement","onload","uri","src","pickerWidth","pickerHeight","manipulateAsync","off","visible","asView","ImageEditorView","ready","processing","setProcessing","styles","container","ImageEditor","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, View, StatusBar, Platform } from \"react-native\";\nimport { ControlBar } from \"./ControlBar\";\nimport { EditingWindow } from \"./EditingWindow\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport { Processing } from \"./Processing\";\nimport { useRecoilState, RecoilRoot } from \"recoil\";\nimport {\n  processingState,\n  imageDataState,\n  editingModeState,\n  readyState,\n  ImageDimensions,\n} from \"./Store\";\nimport { OperationBar } from \"./OperationBar/OperationBar\";\nimport { UniversalModal } from \"./UniversalModal\";\nconst noScroll = require(\"no-scroll\");\n\ntype EditorContextType = {\n  throttleBlur: boolean;\n  minimumCropDimensions: ImageDimensions;\n  fixedAspectRatio: number;\n  lockAspectRatio: boolean;\n  mode: Mode;\n  onCloseEditor: () => void;\n  onEditingComplete: (result: any) => void;\n  allowedTransformOperations?: TransformOperations[];\n  allowedAdjustmentOperations?: AdjustmentOperations[];\n};\n\nexport const EditorContext = React.createContext<EditorContextType>({\n  throttleBlur: true,\n  minimumCropDimensions: {\n    width: 0,\n    height: 0,\n  },\n  fixedAspectRatio: 1.6,\n  lockAspectRatio: false,\n  mode: \"full\",\n  onCloseEditor: () => {},\n  onEditingComplete: () => {},\n});\n\nexport type Mode = \"full\" | \"crop-only\";\n\nexport type TransformOperations = \"crop\" | \"rotate\";\nexport type AdjustmentOperations = \"blur\";\nexport type EditingOperations = TransformOperations | AdjustmentOperations;\n\nexport interface ImageEditorProps {\n  visible: boolean;\n  onCloseEditor: () => void;\n  imageUri: string | undefined;\n  fixedCropAspectRatio?: number;\n  minimumCropDimensions?: {\n    width: number;\n    height: number;\n  };\n  onEditingComplete: (result: any) => void;\n  lockAspectRatio?: boolean;\n  throttleBlur?: boolean;\n  mode?: Mode;\n  allowedTransformOperations?: TransformOperations[];\n  allowedAdjustmentOperations?: AdjustmentOperations[];\n  asView?: boolean;\n}\n\nfunction ImageEditorCore(props: ImageEditorProps) {\n  //\n  const {\n    mode = \"full\",\n    throttleBlur = true,\n    minimumCropDimensions = { width: 0, height: 0 },\n    fixedCropAspectRatio: fixedAspectRatio = 1.6,\n    lockAspectRatio = false,\n    allowedTransformOperations,\n    allowedAdjustmentOperations,\n  } = props;\n\n  const [, setImageData] = useRecoilState(imageDataState);\n  const [, setReady] = useRecoilState(readyState);\n  const [, setEditingMode] = useRecoilState(editingModeState);\n\n  // Initialise the image data when it is set through the props\n  React.useEffect(() => {\n    const initialise = async () => {\n      if (props.imageUri) {\n        const enableEditor = () => {\n          setReady(true);\n          // Set no-scroll to on\n          noScroll.on();\n        };\n        // Platform check\n        if (Platform.OS === \"web\") {\n          let img = document.createElement(\"img\");\n          img.onload = () => {\n            setImageData({\n              uri: props.imageUri ?? \"\",\n              height: img.height,\n              width: img.width,\n            });\n            enableEditor();\n          };\n          img.src = props.imageUri;\n        } else {\n          const { width: pickerWidth, height: pickerHeight } =\n            await ImageManipulator.manipulateAsync(props.imageUri, []);\n          setImageData({\n            uri: props.imageUri,\n            width: pickerWidth,\n            height: pickerHeight,\n          });\n          enableEditor();\n        }\n      }\n    };\n    initialise();\n  }, [props.imageUri]);\n\n  const onCloseEditor = () => {\n    // Set no-scroll to off\n    noScroll.off();\n    props.onCloseEditor();\n  };\n\n  React.useEffect(() => {\n    // Reset the state of things and only render the UI\n    // when this state has been initialised\n    if (!props.visible) {\n      setReady(false);\n    }\n    // Check if ther mode is set to crop only if this is the case then set the editingMode\n    // to crop\n    if (mode === \"crop-only\") {\n      setEditingMode(\"crop\");\n    }\n  }, [props.visible]);\n\n  return (\n    <EditorContext.Provider\n      value={{\n        mode,\n        minimumCropDimensions,\n        lockAspectRatio,\n        fixedAspectRatio,\n        throttleBlur,\n        allowedTransformOperations,\n        allowedAdjustmentOperations,\n        onCloseEditor,\n        onEditingComplete: props.onEditingComplete,\n      }}\n    >\n      <StatusBar hidden={props.visible} />\n      {props.asView ? (\n        <ImageEditorView {...props} />\n      ) : (\n        <UniversalModal\n          visible={props.visible}\n          presentationStyle=\"fullScreen\"\n          statusBarTranslucent\n        >\n          <ImageEditorView {...props} />\n        </UniversalModal>\n      )}\n    </EditorContext.Provider>\n  );\n}\n\nexport function ImageEditorView(props: ImageEditorProps) {\n  //\n  const { mode = \"full\" } = props;\n\n  const [ready, setReady] = useRecoilState(readyState);\n  const [processing, setProcessing] = useRecoilState(processingState);\n\n  return (\n    <>\n      {ready ? (\n        <View style={styles.container}>\n          <ControlBar />\n          <EditingWindow />\n          {mode === \"full\" && <OperationBar />}\n        </View>\n      ) : null}\n      {processing ? <Processing /> : null}\n    </>\n  );\n}\n\nexport function ImageEditor(props: ImageEditorProps) {\n  //\n\n  return (\n    <RecoilRoot>\n      <ImageEditorCore {...props} />\n    </RecoilRoot>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#222\",\n  },\n});\n"]}