{"version":3,"sources":["usePerformCrop.tsx"],"names":["usePerformCrop","accumulatedPan","accumulatedPanState","imageBounds","imageBoundsState","imageScaleFactor","imageScaleFactorState","cropSize","cropSizeState","setProcessing","processingState","imageData","setImageData","imageDataState","setEditingMode","editingModeState","onPerformCrop","croppingBounds","originX","Math","round","x","originY","y","width","height","cropResult","ImageManipulator","manipulateAsync","uri","crop","Platform","OS","webCorrection","error","Alert","alert"],"mappings":";;;;;;;AACA;;AACA;;AASA;;AACA;;;;;;AAEO,MAAMA,cAAc,GAAG,MAAM;AAClC,QAAM,CAACC,cAAD,IAAmB,4BAAeC,0BAAf,CAAzB;AACA,QAAM,CAACC,WAAD,IAAgB,4BAAeC,uBAAf,CAAtB;AACA,QAAM,CAACC,gBAAD,IAAqB,4BAAeC,4BAAf,CAA3B;AACA,QAAM,CAACC,QAAD,IAAa,4BAAeC,oBAAf,CAAnB;AACA,QAAM,GAAGC,aAAH,IAAoB,4BAAeC,sBAAf,CAA1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,4BAAeC,qBAAf,CAAlC;AACA,QAAM,GAAGC,cAAH,IAAqB,4BAAeC,uBAAf,CAA3B;;AACA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF;AACA,YAAMC,cAAc,GAAG;AACrBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CACP,CAACnB,cAAc,CAACoB,CAAf,GAAmBlB,WAAW,CAACkB,CAAhC,IAAqChB,gBAD9B,CADY;AAIrBiB,QAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CACP,CAACnB,cAAc,CAACsB,CAAf,GAAmBpB,WAAW,CAACoB,CAAhC,IAAqClB,gBAD9B,CAJY;AAOrBmB,QAAAA,KAAK,EAAEL,IAAI,CAACC,KAAL,CAAWb,QAAQ,CAACiB,KAAT,GAAiBnB,gBAA5B,CAPc;AAQrBoB,QAAAA,MAAM,EAAEN,IAAI,CAACC,KAAL,CAAWb,QAAQ,CAACkB,MAAT,GAAkBpB,gBAA7B;AARa,OAAvB,CAFE,CAYF;;AACAI,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAMiB,UAAU,GAAG,MAAMC,gBAAgB,CAACC,eAAjB,CAAiCjB,SAAS,CAACkB,GAA3C,EAAgD,CACvE;AAAEC,QAAAA,IAAI,EAAEb;AAAR,OADuE,CAAhD,CAAzB,CAdE,CAiBF;AACA;AACA;;AACA,UAAIc,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,cAAMC,aAAa,GAAG,MAAMN,gBAAgB,CAACC,eAAjB,CAC1BF,UAAU,CAACG,GADe,EAE1B,CAAC;AAAEC,UAAAA,IAAI,EAAE,EAAE,GAAGb,cAAL;AAAqBC,YAAAA,OAAO,EAAE,CAA9B;AAAiCI,YAAAA,OAAO,EAAE;AAA1C;AAAR,SAAD,CAF0B,CAA5B;AAIA,cAAM;AAAEO,UAAAA,GAAF;AAAOL,UAAAA,KAAP;AAAcC,UAAAA;AAAd,YAAyBQ,aAA/B;AACArB,QAAAA,YAAY,CAAC;AAAEiB,UAAAA,GAAF;AAAOL,UAAAA,KAAP;AAAcC,UAAAA;AAAd,SAAD,CAAZ;AACD,OAPD,MAOO;AACL,cAAM;AAAEI,UAAAA,GAAF;AAAOL,UAAAA,KAAP;AAAcC,UAAAA;AAAd,YAAyBC,UAA/B;AACAd,QAAAA,YAAY,CAAC;AAAEiB,UAAAA,GAAF;AAAOL,UAAAA,KAAP;AAAcC,UAAAA;AAAd,SAAD,CAAZ;AACD;;AACDhB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAK,MAAAA,cAAc,CAAC,kBAAD,CAAd;AACD,KAjCD,CAiCE,OAAOoB,KAAP,EAAc;AACd;AACAzB,MAAAA,aAAa,CAAC,KAAD,CAAb;;AACA0B,yBAAMC,KAAN,CAAY,kCAAZ;AACD;AACF,GAvCD;;AAwCA,SAAOpB,aAAP;AACD,CAjDM","sourcesContent":["import { useCallback } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  accumulatedPanState,\n  cropSizeState,\n  editingModeState,\n  imageBoundsState,\n  imageDataState,\n  imageScaleFactorState,\n  processingState,\n} from \"../Store\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport { Alert, Platform } from \"react-native\";\n\nexport const usePerformCrop = () => {\n  const [accumulatedPan] = useRecoilState(accumulatedPanState);\n  const [imageBounds] = useRecoilState(imageBoundsState);\n  const [imageScaleFactor] = useRecoilState(imageScaleFactorState);\n  const [cropSize] = useRecoilState(cropSizeState);\n  const [, setProcessing] = useRecoilState(processingState);\n  const [imageData, setImageData] = useRecoilState(imageDataState);\n  const [, setEditingMode] = useRecoilState(editingModeState);\n  const onPerformCrop = async () => {\n    try {\n      // Calculate cropping bounds\n      const croppingBounds = {\n        originX: Math.round(\n          (accumulatedPan.x - imageBounds.x) * imageScaleFactor\n        ),\n        originY: Math.round(\n          (accumulatedPan.y - imageBounds.y) * imageScaleFactor\n        ),\n        width: Math.round(cropSize.width * imageScaleFactor),\n        height: Math.round(cropSize.height * imageScaleFactor),\n      };\n      // Set the editor state to processing and perform the crop\n      setProcessing(true);\n      const cropResult = await ImageManipulator.manipulateAsync(imageData.uri, [\n        { crop: croppingBounds },\n      ]);\n      // Check if on web - currently there is a weird bug where it will keep\n      // the canvas from ImageManipualtor at originX + width and so we'll just crop\n      // the result again for now if on web - TODO write github issue!\n      if (Platform.OS === \"web\") {\n        const webCorrection = await ImageManipulator.manipulateAsync(\n          cropResult.uri,\n          [{ crop: { ...croppingBounds, originX: 0, originY: 0 } }]\n        );\n        const { uri, width, height } = webCorrection;\n        setImageData({ uri, width, height });\n      } else {\n        const { uri, width, height } = cropResult;\n        setImageData({ uri, width, height });\n      }\n      setProcessing(false);\n      setEditingMode(\"operation-select\");\n    } catch (error) {\n      // If there's an error dismiss the the editor and alert the user\n      setProcessing(false);\n      Alert.alert(\"An error occurred while editing.\");\n    }\n  };\n  return onPerformCrop;\n};\n"]}