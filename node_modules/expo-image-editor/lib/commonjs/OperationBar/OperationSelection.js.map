{"version":3,"sources":["OperationSelection.tsx"],"names":["operations","transform","title","iconID","operationID","adjust","OperationSelection","allowedTransformOperations","allowedAdjustmentOperations","EditorContext","isTransformOnly","isAdjustmentOnly","selectedOperationGroup","setSelectedOperationGroup","React","useState","setEditingMode","editingModeState","filteredOperations","filteredTransforms","filter","op","includes","filteredAdjustments","styles","opRow","map","item","index","opContainer","modeRow","modeButton","backgroundColor","StyleSheet","create","height","width","justifyContent","alignItems","marginLeft","flexDirection","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  Platform,\n  StyleSheet,\n  View,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport { Icon } from \"../components/Icon\";\nimport { IconButton } from \"../components/IconButton\";\nimport { editingModeState, EditingModes } from \"../Store\";\nimport { useRecoilState } from \"recoil\";\nimport { useContext } from \"react\";\nimport {\n  AdjustmentOperations,\n  EditingOperations,\n  EditorContext,\n  TransformOperations,\n} from \"..\";\nimport { useMemo } from \"react\";\n\ninterface Operation<T> {\n  title: string;\n  iconID: React.ComponentProps<typeof Icon>[\"iconID\"];\n  operationID: T;\n}\n\ninterface Operations {\n  transform: Operation<TransformOperations>[];\n  adjust: Operation<AdjustmentOperations>[];\n}\n\nconst operations: Operations = {\n  transform: [\n    {\n      title: \"Crop\",\n      iconID: \"crop\",\n      operationID: \"crop\",\n    },\n    {\n      title: \"Rotate\",\n      iconID: \"rotate-90-degrees-ccw\",\n      operationID: \"rotate\",\n    },\n  ],\n  adjust: [\n    {\n      title: \"Blur\",\n      iconID: \"blur-on\",\n      operationID: \"blur\",\n    },\n  ],\n};\n\nexport function OperationSelection() {\n  //\n  const { allowedTransformOperations, allowedAdjustmentOperations } =\n    useContext(EditorContext);\n\n  const isTransformOnly =\n    allowedTransformOperations && !allowedAdjustmentOperations;\n  const isAdjustmentOnly =\n    allowedAdjustmentOperations && !allowedTransformOperations;\n\n  const [selectedOperationGroup, setSelectedOperationGroup] = React.useState<\n    \"transform\" | \"adjust\"\n  >(isAdjustmentOnly ? \"adjust\" : \"transform\");\n\n  const [, setEditingMode] = useRecoilState(editingModeState);\n\n  const filteredOperations = useMemo(() => {\n    // If neither are specified then allow the full range of operations\n    if (!allowedTransformOperations && !allowedAdjustmentOperations) {\n      return operations;\n    }\n    const filteredTransforms = allowedTransformOperations\n      ? operations.transform.filter((op) =>\n          allowedTransformOperations.includes(op.operationID)\n        )\n      : operations.transform;\n    const filteredAdjustments = allowedAdjustmentOperations\n      ? operations.adjust.filter((op) =>\n          allowedAdjustmentOperations.includes(op.operationID)\n        )\n      : operations.adjust;\n    if (isTransformOnly) {\n      return { transform: filteredTransforms, adjust: [] };\n    }\n    if (isAdjustmentOnly) {\n      return { adjust: filteredAdjustments, transform: [] };\n    }\n    return { transform: filteredTransforms, adjust: filteredAdjustments };\n  }, [\n    allowedTransformOperations,\n    allowedAdjustmentOperations,\n    isTransformOnly,\n    isAdjustmentOnly,\n  ]);\n\n  return (\n    <>\n      <ScrollView style={styles.opRow} horizontal>\n        {\n          //@ts-ignore\n          filteredOperations[selectedOperationGroup].map(\n            (item: Operation<EditingOperations>, index: number) => (\n              <View style={styles.opContainer} key={item.title}>\n                <IconButton\n                  text={item.title}\n                  iconID={item.iconID}\n                  onPress={() => setEditingMode(item.operationID)}\n                />\n              </View>\n            )\n          )\n        }\n      </ScrollView>\n      {!isTransformOnly && !isAdjustmentOnly ? (\n        <View style={styles.modeRow}>\n          <TouchableOpacity\n            style={[\n              styles.modeButton,\n              selectedOperationGroup === \"transform\" && {\n                backgroundColor: \"#333\",\n              },\n            ]}\n            onPress={() => setSelectedOperationGroup(\"transform\")}\n          >\n            <Icon iconID=\"transform\" text=\"Transform\" />\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[\n              styles.modeButton,\n              selectedOperationGroup === \"adjust\" && {\n                backgroundColor: \"#333\",\n              },\n            ]}\n            onPress={() => setSelectedOperationGroup(\"adjust\")}\n          >\n            <Icon iconID=\"tune\" text=\"Adjust\" />\n          </TouchableOpacity>\n        </View>\n      ) : null}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  opRow: {\n    height: 80,\n    width: \"100%\",\n    backgroundColor: \"#333\",\n  },\n  opContainer: {\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginLeft: 16,\n  },\n  modeRow: {\n    height: 80,\n    width: \"100%\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n  },\n  modeButton: {\n    height: 80,\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#222\",\n  },\n});\n"]}